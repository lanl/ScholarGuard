def make_context():
        """
        Shared context function to be used in an AS2 message

        :return: (dict) the context section of the AS2 message.
        """

        context = ["https://www.w3.org/ns/activitystreams#",
               "http://mementoweb.org/test-ns#"]
        temp = {}
        temp["tracker"] = "http://tracker.mementoweb.org/ns#"
        temp["prov"] = "http://www.w3.org/ns/prov#"
        temp["schema"] = "https://schema.org/"
        temp["prov:used"] = {
                "@type": "@id",
                "@container": "@set"
        }
        temp["prov:wasInformedBy"] = {
                "@type": "@id",
                "@container": "@set"}
        temp["prov:wasGeneratedBy"] = {"@type": "@id"}
        temp["prov:softwareAgent"] = {"@type": "@id"}
        temp["prov:generatedAtTime"] = {
                "@type": "http://www.w3.org/2001/XMLSchema#dateTime"}
        context.append(temp)
        return context

def template_as2(config, event_id):
    """
    Generates a template as2 to be built off of for each
    tracker.

    :param config: (dict) App configuration
    :param tracker_name: (str) Tracker name (e.g. github, orcid) in repository
    :return: (dict) as2 template usable by any tracker
    """
    as2_payload = {"@context": {}, "event": {}}
    as2_payload["@context"] = make_context()

    prov_id = event_id + "#activity"

    prov = {}
    prov["@id"] = prov_id
    prov["type"] = ["prov:Activity", "prov:softwareAgent"]
    prov_used = {}
    # prov_used["@id"] = (
    #     "https://github.com/oduwsdl/scholarly-orphans-trackers"
    #     "/web/artifact_tracker/trackers/{}.py"
    #     .format(tracker_name))
    prov_used["type"] = "schema:SoftwareApplication"
    # provenance_payload["schema:version"] = "v0.3"
    # TODO: To add schema:version consider iterating through list of modules
    # and taking their __version__ variable which could be a string, float,
    # tuple, or none type.
    prov_used["prov:used"] = [
          {
            "id": "http://myresearch.institute/ingest/"
          },
          {
            "id": "https://github.com/webrecorder/pywb",
            "schema:version": "v2.0.4"
          }
    ]

    prov["prov:used"] = [prov_used]
    as2_payload["activity"] = prov
    # To be generated by the tracker event
    event_payload = {"type": [],
                     "object": {},  
                      "result": {}}
    event_payload["@id"] = event_id
    event_payload["prov:wasGeneratedBy"] = prov_id
    # event_payload["prov:generatedAtTime"] = datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ")
    event_payload["published"] = ""
    as2_payload["event"] = event_payload

    return as2_payload

def make_as2_payload(archiveEvent, config, portal_url, portal_username, prov_apiurl):

    target_name = 'tracker'

    actor = {}
    actor_url = "{}/{}/".format(
        portal_url,
        portal_username)
    actor["type"] = ["Application"]
    actor["id"] = actor_url
    actor["name"] = "My Research Institute's Memento Archiving Process"

    as2_payload = template_as2(config, archiveEvent.getEventId())

    # for item in archiveEvent.getArchiveResult()["items"]:
    for item in archiveEvent.getArchiveObject()["items"]:
      as2_payload["activity"]["prov:used"].append({"id": item["href"], "type":"schemaMediaObject"})
    as2_payload["event"]["actor"] = actor

    processedAt = archiveEvent.getProcessedTime()
    pubtime = processedAt.strftime("%Y-%m-%dT%H:%M:%SZ")
    as2_payload["event"]["published"] = pubtime
    as2_payload["event"]["prov:generatedAtTime"] = pubtime
    as2_payload["event"]["type"] = ["Add",
                                    "tracker:ArtifactArchiving",
                                    "tracker:Archiver"]
    informedBy = []
    aSource = {}
    informedBy.append({"id": archiveEvent.getCaptureId(), "type":"tracker:Capture"})
    informedBy.append({"id": archiveEvent.getTrackerId(), "type":"tracker:Tracker"})
    as2_payload["event"]["prov:wasInformedBy"] = informedBy

    as2_payload["event"]["result"] = archiveEvent.getArchiveResult()
    as2_payload["event"]["object"] = archiveEvent.getArchiveObject()

    return as2_payload

